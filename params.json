{"name":"Micro Toolkit","tagline":"This repository will contain generic information about the project","body":"## Motive\r\n\r\nMicro-toolkit started to be a smaller project named ZMQ Service Suite, this project included a set of libraries that would allow you to build microservices using ZeroMQ as a transport layer. The libraries were built to solve a single problem, expose business logic as microservices with 0 friction using RPC style.\r\n\r\nThe libraries were being used in several enterprise projects and some patterns started to appear.\r\n\r\n## Goal\r\n\r\nThe idea is to evolve the project into a set of tools and microservices than can be reused across projects.\r\n\r\n## Current State\r\n\r\nCurrently the toolkit uses a minimal service broker implemented on top of ZeroMQ. The broker acts as a Service Directory and Load Balancer, this component will do the bridge between services and clients with support for multiple technologies. For more information about this please check [ZSS Specs](http://micro-toolkit.github.io/zmq-service-suite-specs/).\r\n\r\nThe client and services libraries hide the transport layer complexity under a well defined API. This approach will allow changing the implementations and topologies without the need to change the service implementations.\r\n\r\nThe current stable projects/features:\r\n\r\n* [Node.js Broker](https://github.com/micro-toolkit/zmq-service-suite-broker-js): Node.js ZeroMQ Broker implementation of ZSS Protocol with support for service discovery and load balancing\r\n* [Node.js Client](https://github.com/micro-toolkit/zmq-service-suite-client-js): Node.js ZeroMQ Client implementation of ZSS Protocol\r\n* [Node.js Service](https://github.com/micro-toolkit/zmq-service-suite-service-js): Node.js ZeroMQ Service implementation of ZSS Protocol\r\n* [Node.js API Generators](https://github.com/micro-toolkit/api-generator-js): Node.js API generators, easy bootstraping to create a REST API and connect to microservices using conventions \r\n* [Node.js API Example](https://github.com/micro-toolkit/api-example-js): Node.js API example on how to use the micro-toolkit api generators to build a facade API that connects to microservices from micro-toolkit\r\n* [Ruby Client](https://github.com/micro-toolkit/zmq-service-suite-ruby): Ruby ZeroMQ Service implementation of ZSS Protocol\r\n* [Ruby Service](https://github.com/micro-toolkit/zmq-service-suite-ruby): Ruby ZeroMQ Service implementation of ZSS Protocol\r\n\r\n## Future \r\n\r\n* HTTP Rest API proxy, the full configurable API is not done yet but you can take a look on the [API Generator](https://github.com/micro-toolkit/api-generator-js) and [API node-js example](https://github.com/micro-toolkit/api-example-js).\r\n* Administration Console with support for: list available services and their instances, to execute requests to services, replay messages, view service metrics;\r\n* Support service discovery and remove broker single point of failure\r\n* Metrics service\r\n* Authentication service\r\n* Generic HTTP connectors\r\n* Add support to other languages\r\n* Support for event driven services\r\n\r\n# Where to start\r\n\r\n* [Ruby Client](https://github.com/micro-toolkit/zss-service-sample): Ruby Client sample\r\n* [Ruby Service](https://github.com/micro-toolkit/zss-service-sample): Ruby Service sample\r\n* [Node.js API Example](https://github.com/micro-toolkit/api-example-js): Node.js API example to easily expose micro toolkit services as HTTP REST API.\r\n\r\n## Authors and Contributors\r\n\r\nThe project is currently authored and maintained by @pjanuario and @dadah. Contributors are welcome, feel free to contact us to discuss any idea or any clarification, bonus points for pull requests! :D\r\n\r\n","google":"UA-52968661-1","note":"Don't delete this file! It's used internally to help with page regeneration."}